from sklearn.linear_model import SGDClassifier

class CorrectnessModel:
	
	def __init__(self,classifier=SGDClassifier(loss='log',penalty='l2',shuffle=True)):
		self.clf = classifier

	def fit(self,X_dict,Y_dict):
		X = []
		Y = []

		for k in X_dict.keys():
			if X_dict[k][0] == None:
				print "id:"+str(k),X_dict[k]
			X.append(X_dict[k])
			Y.append(Y_dict[k])

		self.clf.fit(X,Y)

	def predict(self,X_dict):
		"""
		This is kind of tricky one. In the training process, the classifier
		recerives the position values. But in the test process they are not
		given in test sample. Instead, the classifier takes pos argument generated by Position
		Model as input and combine it to the other features.
		X_dict should be like: {"64":[1,3,4,30,...]}
		"""
		return self.clf.predict(X_dict.values())

if __name__ == "__main__":
	X = {1:[1,3,4],
		 2:[3,4,1],
		 3:[2,2,5],
		 4:[6,1,2],
		 5:[4,6,2],
		 6:[5,3,8]}

	Y = {1:-1,
		 2:-1,
		 3:-1,
		 4:1,
		 5:1,
		 6:1}

	correctness = CorrectnessModel()
	correctness.fit(X,Y)

	test = {7:[1,3,4]}

	print correctness.predict(test)


